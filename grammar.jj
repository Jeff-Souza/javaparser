/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.8";

  static = false;
}

/**
 * This defines the main class that is generated by the parser generator.  We've
 * added a main method to the code that will be generated.
**/
PARSER_BEGIN(PS7Compiler)
package ps7;
import java.util.HashMap;

public class PS7Compiler
{
  // Maps programming language variables to DC registers
  private HashMap < String, Character > variables =
        new HashMap < String, Character > ();

  // Maps programming language variables to types.
  private HashMap<String, String > types =
        new HashMap<String, String >();

  // If the t is not "int", throws a TypeException
  public void checkInt (String type)
  {
    if (!(type.equals("int")))
    {
      throw new TypeException("Expected int, received " + type);
    }
  }

  // If the t is not "int", throws a TypeException
  public void checkBool (String type)
  {
    if (!(type.equals("boolean")))
    {
      throw new TypeException("Expected boolean, received " + type);
    }
  }
  
  public static void main(String args [])
  {
    PS7Compiler parser = new PS7Compiler(System.in);
    try
    {
      parser.program();
    }
    catch (TypeException e)
    {
      System.err.println(e.getMessage());
    }
    catch (ParseException e)
    {
      System.err.println("Parse error: " + e.getMessage());
    }
    catch (TokenMgrError e)
    {
      System.err.println(e.getMessage());
    }
    catch (RuntimeException e)
    {
      System.err.println(e.getMessage());
    }
  }
}

/**
 * Exception used to report type-checking errors.
 */
 class TypeException extends RuntimeException
 {
   public TypeException (String message)
   {
     super(message);
   }
 }

PARSER_END(PS7Compiler)

/************************ Regular expressions that define tokens ***********************/
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < EQUALS : "=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < SMALLER : "<" >
| < BIGGER : ">" >
| < EEQUAL : "==" >  
}

TOKEN :
{
  < INTTYPE : "int" >
| < BOOLEANTYPE : "boolean" >
| < STRINGTYPE : "string" >
| < BOOLEAN : "true" | "false" >
| < PRINT : "print" >
| < NEWLINE : "newline" >
| < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < VAR : (< LETTER >)+ >
| < #LETTER :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < STRING: "\"" (~["\"", "[", "]"])* "\"" >
}

/***************************** Productions that define grammar *******************/
void program() :
{
}
{
  (
    statement()
  )*
  < EOF >
}

void statement() :
{
  Token t;
  Token type;
  String etype;
}
{
  (
    t = < VAR > < EQUALS > etype = bool() ";"
    {
      if (variables.get(t.image) == null)
      {
          throw new TypeException("Undeclared variable: " + t.image);
      }

      if (!types.get(t.image).equals(etype))
	  {
		  throw new TypeException("Type mismatch");
      }
		
      char reg = variables.get(t.image);
      System.out.print("s" + reg + " ");
    }
  )
|
  (
    < NEWLINE > ";"
    {
    	System.out.print("[\n]P");
    }
  )
|
  (
    (type = < INTTYPE > | type = < STRINGTYPE > | type = < BOOLEANTYPE >)
      t = < VAR > < EQUALS > etype = bool() ";"
    {
      if (variables.get(t.image) == null)
      {
        if (variables.size() >= 26)
        {
          throw new TypeException("Too many variables; limit is 26");
        }
        variables.put(t.image, (char) ('A' + variables.size()));
		types.put(t.image, type.image);

		if (!type.image.equals(etype))
		{
		  throw new TypeException("Type mismatch");
		}
		
		char reg2 = variables.get(t.image);
        System.out.print("s" + reg2 + " ");
      }
      else
      {
        throw new TypeException("Variable already declared: " + t.image);
      }
    }
  )
|   
  (
    < PRINT > bool() ";"
    {
      System.out.print("n ");
    }
  )
}

String bool() :
{
  Token t;
  String type9, type10;
}
{
  type9 = inequal()
  (
    (
      t = < EEQUAL >
    )
    type10 = inequal()
    {
      System.out.print(t.image + " ");
      checkBool(type9);
	  checkBool(type10);
	  if(t.image.equals("=="))
	  {		return "boolean";
	  }
    }
  )*
  {
    return type9;
  }
}

String inequal() :
{
  Token t;
  String type7, type8;
}
{
  type7 = exp()
  (
    (
      t = < SMALLER >
    | t = < BIGGER >
    | t = < EEQUAL >
    )
    type8 = exp()
    {
      System.out.print(t.image + " ");
      checkInt(type7);
	  checkInt(type8);
	  if(t.image.equals("<") || t.image.equals(">") || t.image.equals("=="))
	  {	    return "boolean";
	  }
    }
  )*
  {
    return type7;
  }
}

String exp() :
{
  Token t;
  String type5, type6;
}
{
  type5 = term()
  (
    (
      t = < PLUS >
    | t = < MINUS >
    )
    type6 = term()
    {
      System.out.print(t.image + " ");
      checkInt(type5);
	  checkInt(type6);
    }
  )*
  {
    return type5;
  }
}

String term() :
{
  Token t;
  String type3, type4;
}
{
  type3 = factor()
  (
    (
      t = < MULTIPLY >
    | t = < DIVIDE >
    )
    type4 = factor()
    {
      System.out.print(t.image + " ");
      checkInt(type3);
      checkInt(type4);
    }
  )*
  {
    return type3;
  }
}

String factor() :
{
  String type2;
}
{
  "-" type2 = element()
  {
    checkInt(type2);
    System.out.print("_1 * ");
    return "int";
  }
| type2 = element()
  {
    return type2;
  }
}

String element() :
{
  Token t;
  String type1;
}
{
  t = < CONSTANT >
  {
    System.out.print(t.image + " ");
    return "int";
  }
|
  t = < BOOLEAN >
  {
  	System.out.print("[" + t.image + "]");
    return "boolean";
  }
|
  t = < STRING >
  {
    String dcs = t.image.replaceFirst("\"", "[");
    dcs = dcs.replaceFirst("\"", "]");
	System.out.print(dcs);
	return "string";
  }
|  
  t = < VAR >
  {
    Character reg = variables.get(t.image);
    if (reg == null)
    {
      throw new RuntimeException("Undefined variable " + t.image);
    }
    else
    {
      System.out.print("l" + reg + " ");
      return types.get(t.image);
    }
  }
| "(" type1 = bool() ")"
  {
	return type1;
  }
}
